name: Windows MoviePilot Builder
on:
  workflow_dispatch:

jobs:
  Windows-build:
    runs-on: windows-latest
    steps:
    - name: Init Python 3.11.4
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.4'

    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependent packages
      run: |
        git checkout wlj0807
        dir
        # python -m pip install --upgrade pip
        # pip install -r requirements.txt
        $src_hash=git ls-remote -h https://github.com/jxxghp/MoviePilot.git
        # $hash=git log -1 --pretty=%H
        $hash_version=$src_hash.Substring(0, 7)
        echo $hash_version
        echo "HASH_VERSION=$hash_version" >> $env:GITHUB_ENV
        echo $HASH_VERSION
        cat $env:GITHUB_ENV


    - name: Download MoviePilot-Frontend
      run: |
        cd ..
        mkdir MoviePilot-Frontend
        cd MoviePilot-Frontend
        # 测试用
        # New-Item -Path . -Name "newfile.txt" -ItemType File
        # 用于获取后端主版本号
        $response = Invoke-WebRequest -Uri https://api.github.com/repos/jxxghp/MoviePilot/releases/latest | ConvertFrom-Json
        # 前端打包后的下载地址
        $extract_release = Invoke-WebRequest https://api.github.com/repos/jxxghp/MoviePilot-Frontend/releases/latest | ConvertFrom-Json
        $extract_assets = $extract_release.assets
        $extract_url = ""
        Write-Host "Download zip"
        foreach ($asset in $extract_assets) {
        if ($asset.name -match 'dist\.zip$') {
        $extract_url = $asset.browser_download_url
        }
        }
        if (-not $extract_url) {
        Write-Host "zip not found"
        exit 1
        }
        Write-Host "前端 Downloading..."
        # 下载
        Invoke-WebRequest -URI $extract_url -OutFile dist.zip
        dir
        Write-Host "Extracting zip"
        # 解压
        Expand-Archive dist.zip -DestinationPath .
        Get-ChildItem -Path .\dist -Recurse | Copy-Item -Destination .
        Remove-Item -Path "dist.zip"
        Remove-Item -Path "dist" -Recurse
        # 提取tag_name的值
        $tagName = $response.tag_name
        echo "FIRST_VERSION=$tagName" >> $env:GITHUB_ENV
        dir


    - name: Make Python package
      run: |
          cd ..
          $python_dir=$(python -c "import os; print(os.path.dirname(os.__file__))")
          $python_root_dir=$python_dir.Substring(0, $python_dir.Length - 4)
          mkdir Python3.11
          cd Python3.11
          New-Item -Path . -Name "newfile.txt" -ItemType File
          # cp -r $python_root_dir/* .
          dir

    - name: Install Inno Setup Compiler
      uses: pwall2222/inno-setup-download@v0.0.4

    - name: Compile Inno Setup Script
      run: |
        cd ..
        echo $env:LATEST_VERSION
        dir
        git clone https://github.com/developer-wlj/Inno-Setup-MoviePilot.git
        cd Inno-Setup-MoviePilot
        Copy-Item -Path ".\ChineseSimplified.isl" -Destination "C:\Users\runneradmin\AppData\Local\Temp\inno\Languages"
        echo $env:FIRST_VERSION
        echo $env:HASH_VERSION
        echo "$env:FIRST_VERSION.$env:HASH_VERSION"
        # iscc /DAppVersion="$env:FIRST_VERSION.$env:HASH_VERSION" build.iss
        iscc /dMyAppVersion="$env:LATEST_VERSION" build.iss
        # $env:FIRST_VERSION = $first_version
        # $env:HASH_VERSION = $hash_version
        # echo "HASH_VERSION = $hash_version" >> $env:GITHUB_ENV

    - name: Upload windows file
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: D:\a\MoviePilot\exe\build\*.exe
#
#    - name: Generate Release
#      uses: softprops/action-gh-release@v1
#      with:
#        tag_name: v${{first_version}}.${{hash_version}}
#        name: v${{first_version}}.${{hash_version}}
#        draft: false
#        prerelease: false
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [ Windows-build ]
    steps:

      - name: Download exe and rename
        uses: actions/download-artifact@v3
      - name: get release_informations
        shell: bash
        run: |
          pwd
          ls -all

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.3
          release_name: v0.0.3
          body: ${{ github.event.commits[0].message }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: |
            ./windows/
