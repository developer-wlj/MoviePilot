name: Windows MoviePilot Builder
on:
  workflow_dispatch:

jobs:
  Windows-build:
    runs-on: windows-latest
    steps:
    - name: Init Python 3.11.4
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.4'

    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependent packages
      run: |
        git checkout wlj0807
        dir
        # python -m pip install --upgrade pip
        # pip install -r requirements.txt
        $hash=git log -1 --pretty=%H
        $hash_version=$hash.Substring(0, 7)
        echo $hash_version
        echo "HASH_VERSION = $hash_version" >> $env:GITHUB_ENV


    - name: Download MoviePilot-Frontend
      run: |
          cd ..
          mkdir MoviePilot-Frontend
          cd MoviePilot-Frontend
          New-Item -Path . -Name "newfile.txt" -ItemType File
          $response = Invoke-WebRequest -Uri 'https://api.github.com/repos/jxxghp/MoviePilot-Frontend/releases/latest' -Method GET
          # 将响应内容转换为JSON对象
          $json = $response.Content | ConvertFrom-Json
          # 提取tag_name的值
          $tagName = $json.tag_name
          # 输出tag_name的值
          echo "正在下载前端程序 $tagName..."
          echo "FIRST_VERSION = $tagName" >> $env:GITHUB_ENV
          # 设置URL和下载路径
          $url = "https://github.com/jxxghp/MoviePilot-Frontend/releases/download/$tagName/dist.zip"
          echo "正在下载前端程序 $url"
          # $destination = "D:\a\MoviePilot\MoviePilot\MoviePilot-Frontend\dist.zip"
          # # 使用Invoke-WebRequest下载ZIP文件
          # $response = Invoke-WebRequest -Uri $url -OutFile $destination
          # echo $response
          # echo $response.StatusCode
          # if ($response.StatusCode -eq 200) {
          # Write-Host "文件已成功下载到：$destination"
          # } else {
          # Write-Error "下载失败，状态码：$($response.StatusCode)"
          # }
          # $zipFilePath = './dist.zip'
          # Expand-Archive -Path $zipFilePath -DestinationPath dist
          dir


    - name: Make Python package
      run: |
          cd ..
          $python_dir=$(python -c "import os; print(os.path.dirname(os.__file__))")
          $python_root_dir=$python_dir.Substring(0, $python_dir.Length - 4)
          mkdir Python3.11
          cd Python3.11
          New-Item -Path . -Name "newfile.txt" -ItemType File
          # cp -r $python_root_dir/* .
          dir


#    - name: Exe Build
#      run: |
#        mkdir build
#        cd build
#        sed -i 's/old_value/new_value/g' build.iss
#        sed -i 's/1.0.9.a0ec38a/1.0.19.a0ec38a/g' 111.iss
#        iscc /DAppVersion=1.2 build.iss

    - name: Install Inno Setup Compiler
      uses: pwall2222/inno-setup-download@v0.0.4

    - name: Compile Inno Setup Script
      run: |
        cd ..
        dir
        git clone https://github.com/developer-wlj/Inno-Setup-MoviePilot.git
        cd Inno-Setup-MoviePilot
        Copy-Item -Path ".\ChineseSimplified.isl" -Destination "C:\Users\runneradmin\AppData\Local\Temp\inno\Languages"
        echo $env:FIRST_VERSION
        echo $env:HASH_VERSION
        echo $env:FIRST_VERSION.$env:HASH_VERSION
        iscc /DAppVersion=$env:FIRST_VERSION.$env:HASH_VERSION build.iss
        # $env:FIRST_VERSION = $first_version
        # $env:HASH_VERSION = $hash_version
        # echo "HASH_VERSION = $hash_version" >> $env:GITHUB_ENV

    - name: Upload windows file
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: D:\a\MoviePilot\exe\build\*.exe
#
#    - name: Generate Release
#      uses: softprops/action-gh-release@v1
#      with:
#        tag_name: v${{first_version}}.${{hash_version}}
#        name: v${{first_version}}.${{hash_version}}
#        draft: false
#        prerelease: false
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [ Windows-build ]
    steps:

      - name: Download exe and rename
        uses: actions/download-artifact@v3
      - name: get release_informations
        shell: bash
        run: |
          pwd
          ls -all
          # mkdir releases
          # mv ./windows/nas-tools.exe ./releases/Windows_MoviePilot_Setup_v${{env.first_version}}.${{env.hash_version}}.exe
          pwd
          ls -all

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.3
          release_name: v0.0.3
          body: ${{ github.event.commits[0].message }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: |
            ./windows/




